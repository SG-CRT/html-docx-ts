{"version":3,"file":"utils.js","sourceRoot":"","sources":["../src/utils.ts"],"names":[],"mappings":";;;AAAA,yCAAkG;AAElG,SAAgB,cAAc,CAAC,UAAkB;IAC/C,IAAM,GAAG,GAAG,kBAAkB,CAAC,UAAU,CAAC,CAAA;IAC1C,IAAM,uBAAuB,GAAG,GAAG,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;IAChE,UAAU,GAAG,GAAG,CAAC,UAAU,CAAC,OAAO,CAAC,KAAK,EAAE,KAAK,CAAC,CAAA;IACjD,OAAO,+BAAmB,CAAC,UAAU,EAAE,uBAAuB,CAAC,CAAA;AACjE,CAAC;AALD,wCAKC;AACD,SAAgB,SAAS,CAAC,MAA+B;IACvD,OAAO,0BAAc,CAAC,MAAM,CAAC,CAAA;AAC/B,CAAC;AAFD,8BAEC;AACD,SAAgB,SAAS,CAAC,MAA+B;IACvD,OAAO,0BAAc,CAAC,MAAM,CAAC,CAAA;AAC/B,CAAC;AAFD,8BAEC;AAED,SAAS,kBAAkB,CAAC,UAAkB;IAC5C,IAAM,iBAAiB,GAAa,EAAE,CAAA;IACtC,IAAM,iBAAiB,GAAG,gCAAgC,CAAA;IAC1D,IAAM,eAAe,GAAG,UAAC,KAAa,EAAE,WAAmB,EAAE,eAAuB,EAAE,cAAsB;QAC1G,IAAM,KAAK,GAAG,iBAAiB,CAAC,MAAM,CAAA;QACtC,IAAM,SAAS,GAAG,WAAW,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAA;QAC3C,IAAM,eAAe,GAAG,0BAAwB,KAAK,SAAI,SAAW,CAAA;QACpE,iBAAiB,CAAC,IAAI,CAAC,2BAAe,CAAC,WAAW,EAAE,eAAe,EAAE,eAAe,EAAE,cAAc,CAAC,CAAC,CAAA;QACtG,OAAO,OAAK,eAAe,OAAI,CAAA;IACjC,CAAC,CAAA;IACD,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE;QAC7B,OAAO,EAAE,UAAU,YAAA,EAAE,iBAAiB,mBAAA,EAAE,CAAA;KACzC;IACD,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,iBAAiB,EAAE,eAAe,CAAC,CAAA;IACnE,OAAO,EAAE,UAAU,YAAA,EAAE,iBAAiB,mBAAA,EAAE,CAAA;AAC1C,CAAC","sourcesContent":["import { mhtDocumentTemplate, mhtPartTemplate, headerTemplate, footerTemplate } from './templates'\nimport { DocumentConfig } from './internal'\nexport function getMHTdocument(htmlSource: string) {\n  const ref = _prepareImageParts(htmlSource)\n  const imageContentPartsString = ref.imageContentParts.join('\\n')\n  htmlSource = ref.htmlSource.replace(/\\=/g, '=3D')\n  return mhtDocumentTemplate(htmlSource, imageContentPartsString)\n}\nexport function getHeader(config: Partial<DocumentConfig>) {\n  return headerTemplate(config)\n}\nexport function getFooter(config: Partial<DocumentConfig>) {\n  return footerTemplate(config)\n}\n\nfunction _prepareImageParts(htmlSource: string) {\n  const imageContentParts: string[] = []\n  const inlinedSrcPattern = /\"data:(\\w+\\/\\w+);(\\w+),(\\S+)\"/g\n  const inlinedReplacer = (match: string, contentType: string, contentEncoding: string, encodedContent: string) => {\n    const index = imageContentParts.length\n    const extension = contentType.split('/')[1]\n    const contentLocation = `file:///C:/fake/image${index}.${extension}`\n    imageContentParts.push(mhtPartTemplate(contentType, contentEncoding, contentLocation, encodedContent))\n    return `\\\"${contentLocation}\\\"`\n  }\n  if (!/<img/g.test(htmlSource)) {\n    return { htmlSource, imageContentParts }\n  }\n  htmlSource = htmlSource.replace(inlinedSrcPattern, inlinedReplacer)\n  return { htmlSource, imageContentParts }\n}\n"]}